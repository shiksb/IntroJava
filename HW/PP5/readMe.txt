readMe.txt

The project contains 2 files - a tester, WordTester, and a class, WordsList.

WordTester.java

This file contains a main method. First, 4 variables are declared:
1. String fileName - this variable contains the file that contains words
2. PrintWriter out - this variable will contain the PrintWriter that will 
						write files
3. String[] wordList - this String array will contain the outputs of the
						methods of class WordLists
4. int i - this is the iteration variable for loops. 

We then have a try block, which could potentially throw errors. First, 
we create an object of class WordLists called 'words' and pass fileName
into the constructor. Then we perform the following tasks: 

1. Print initialisation message
2. Create a PrintWriter object 'out' that writes or
	creates a file by the name "words_sizeN.txt". 
3. Then, wordList contains the output from the method words.lengthN(6)
4. Iterate through every word in the array and print it to the file
5. Print completion message

These exact steps are repeated for the other 4 methods and their
respective fileNames.

Then, we have 3 catch blocks. The first one catches FileNotFoundException
exceptions if the file does not exist and displays the error message for that
Then, the second one catches IOException exceptions if there were errors 
generated by reading/writing to the files. Then, the third one catches any 
other errors that could be generated and prints the error message of that 
error.


WordLists.java

private ArrayList<String> words = new ArrayList<String>() 

This instance variable is a string arraylist that contains all the words
in fileName.txt. It is an arraylist since the size of the array is 
variable. 

public WordLists(String fileName) throws FileNotFoundException, IOException{

The constructor takes the parameter String fileName which is the 
name of the file that needs to be read. Since this might create errors
if the file does not exist, we add throws FileNotFoundException, IOException
after the constructor. Then, it creates a File object and Scanner object. 
With that every line is scanned and added to arraylist words, while a next line 
is present (using in.hasNextLine()). Then it closes the scanner.

The lengthN method gets every element in words and checks if its size is
equal to n. If it is, the new arraylist - wordsNlist - appends the word. 
Finally we convert wordsNlist to a string array using the function 
wordsNlist.toArray(new String[wordsNlist.size()]) and return it. 

The startsWith method creates an arraylist wordsNlist that contains all words
of length n and then checks if the words' first letter is firstletter
by using charAt() function on index 0. If yes, that word is appended to the 
arraylist. Again, the arraylist is converted to array and returned.

The containsLetter method creates an arraylist wordsNlist that contains 
all words of length n and then checks if the word contains the letter 
included using the wordsN[i].indexOf(included,1) function which returns
the index of the character 'included' if present, beginning searching
from index 1. If there's no presence of 'included' starting from index
1, then this function returns -1. If the output from this function is NOT
-1 and if the word does not begin with letter 'included', then the word is
added to the arraylist. Again, the arraylist is converted to array and 
returned.

The vowelHeavy method creates an arraylist wordsNlist that contains 
all words of length n and then iterates through every letter in every 
word to check if it is a vowel (a, e, i, o or u). If it is, count is 
incremented by 1. In the end, we check if count equals m. If yes, the word
is appended to the arraylist. Again, the arraylist is converted to array and 
returned.

The multiLetter method iterates through every word in arraylist words,
and iterates through every letter in that word to count the precence
of letter included. If the total count of included equals m, then the word
is added to an arraylist. Again, the arraylist is converted to array and 
returned.


													


